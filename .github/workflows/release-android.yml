on:
  push:
    tags:
      - v*
name: Build-Release[Android]

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      # 缓存 Flutter SDK
      - name: Cache Flutter SDK
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.FLUTTER_HOME }}
            /opt/hostedtoolcache/flutter
          key: ${{ runner.os }}-flutter-3.27.1-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-flutter-3.27.1-
            ${{ runner.os }}-flutter-

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.27.1'
          channel: 'stable'
          cache: true

      - name: Setup Java JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '21'
          cache: 'gradle'

      # 缓存 pub 依赖
      - name: Cache pub dependencies
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.PUB_CACHE }}
            ~/.pub-cache
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-pub-

      # 缓存 Gradle
      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            android/.gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Install dependencies
        run: flutter pub get

      # 获取最新 release 信息
      - name: Get latest release
        id: get_release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.RELEASE_TOKEN }}
          script: |
            const { data: releases } = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            const latestRelease = releases[0];
            const version = latestRelease.tag_name.replace(/^v/, '') + '+1'
            core.setOutput('upload_url', latestRelease.upload_url);
            core.setOutput('tag_name', latestRelease.tag_name);
            core.setOutput('version', version);

      # 修改版本号
      - name: Update version
        uses: fjogeleit/yaml-update-action@main
        with:
          valueFile: 'pubspec.yaml'
          propertyPath: 'version'
          value: ${{ steps.get_release.outputs.version }}
          commitChange: false

      # 一次性构建所有 APK
      - name: Build all APKs
        run: |
          flutter build apk --release &
          PID1=$!
          flutter build apk --release --split-per-abi &
          PID2=$!
          wait $PID1 $PID2
        env:
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}

      # 批量上传所有 APK
      - name: Upload all APKs
        uses: actions/github-script@v7
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
          UPLOAD_URL: ${{ steps.get_release.outputs.upload_url }}
          TAG_NAME: ${{ steps.get_release.outputs.tag_name }}
        with:
          github-token: ${{ secrets.RELEASE_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            
            const apks = [
              { path: './build/app/outputs/flutter-apk/app-release.apk', name: 'universal' },
              { path: './build/app/outputs/flutter-apk/app-armeabi-v7a-release.apk', name: 'armeabi-v7a' },
              { path: './build/app/outputs/flutter-apk/app-arm64-v8a-release.apk', name: 'arm64-v8a' },
              { path: './build/app/outputs/flutter-apk/app-x86_64-release.apk', name: 'x86_64' }
            ];

            const uploadUrl = process.env.UPLOAD_URL;
            const tagName = process.env.TAG_NAME;

            for (const apk of apks) {
              if (!fs.existsSync(apk.path)) {
                console.log(`APK not found: ${apk.path}`);
                continue;
              }

              const assetName = `oasx_${tagName}_${apk.name}.apk`;
              const stats = fs.statSync(apk.path);
              const fileContent = fs.readFileSync(apk.path);

              console.log(`Uploading ${assetName}...`);

              await github.rest.repos.uploadReleaseAsset({
                url: uploadUrl,
                headers: {
                  'content-type': 'application/vnd.android.package-archive',
                  'content-length': stats.size
                },
                name: assetName,
                data: fileContent
              });

              console.log(`Successfully uploaded ${assetName}`);
            }